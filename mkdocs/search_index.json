{
    "docs": [
        {
            "location": "/",
            "text": "MongoDB Guide\n\u00b6\n\n\nThis documentation has the objective of gather useful information about MongoDB that we have learnt with development and production experience, research and notes taken from \nMongoDB University\n courses.\n\n\nThis guide is not a MongoDB documentation rewrite, rather is a collection of useful commands, quick examples, tips and links to the actual MongoDB documentation.",
            "title": "Introduction"
        },
        {
            "location": "/#mongodb-guide",
            "text": "This documentation has the objective of gather useful information about MongoDB that we have learnt with development and production experience, research and notes taken from  MongoDB University  courses.  This guide is not a MongoDB documentation rewrite, rather is a collection of useful commands, quick examples, tips and links to the actual MongoDB documentation.",
            "title": "MongoDB Guide"
        },
        {
            "location": "/crud/create/",
            "text": "Create\n\u00b6\n\n\ndb.collection.insertOne\n\u00b6\n\n\nInsert a single document into a collection.\n\n\ndb\n.\nmovies\n.\ninsertOne\n({\n \n\"title\"\n:\n \n\"Deadpool\"\n,\n \n\"year\"\n:\n \n2016\n \n});\n\n\n\n\n\n\ndb.collection.insertMany\n\u00b6\n\n\nInsert multiple documents into a collection.\n\n\ndb\n.\nmovies\n.\ninsertMany\n(\n\n  \n[\n\n    \n{\n \n\"_id\"\n:\n \n1\n,\n \n\"title\"\n:\n \n\"Deadpool\"\n,\n \n\"year\"\n:\n \n2016\n \n},\n \n    \n{\n \n\"_id\"\n:\n \n1\n,\n \n\"title\"\n:\n \n\"Scarface\"\n,\n \n\"year\"\n:\n \n1983\n \n},\n \n// has the same id that Deadpool\n\n    \n{\n \n\"_id\"\n:\n \n2\n,\n \n\"title\"\n:\n \n\"Avatar\"\n,\n \n\"year\"\n:\n \n2009\n \n},\n\n  \n]\n\n\n);\n\n\n\n\n\n\nBy default, \ninsertMany\n insert all the documents with the parameter \nordered\n set to true,\nthis means that mongo will insert all the documents one by one from top to bottom but\nif in the middle of the operation mongo finds an error with at least one document, the process will stop.\n\n\ndb\n.\nmovies\n.\ninsertMany\n(\n\n  \n[\n\n    \n{\n \n\"_id\"\n:\n \n1\n,\n \n\"title\"\n:\n \n\"Deadpool\"\n,\n \n\"year\"\n:\n \n2016\n \n},\n \n    \n{\n \n\"_id\"\n:\n \n1\n,\n \n\"title\"\n:\n \n\"Scarface\"\n,\n \n\"year\"\n:\n \n1983\n \n},\n \n// has the same id that Deadpool\n\n    \n{\n \n\"_id\"\n:\n \n2\n,\n \n\"title\"\n:\n \n\"Avatar\"\n,\n \n\"year\"\n:\n \n2009\n \n},\n\n  \n]\n\n\n);\n\n\n\n\n\n\nUsing the parameter \nordered\n with \nfalse\n as value, mongo will skip the error (if exist) and\nwill insert successfuly all the documents that have no errors.\n\n\ndb\n.\nmovies\n.\ninsertMany\n(\n\n  \n[\n\n    \n{\n \n\"title\"\n:\n \n\"Deadpool\"\n,\n \n\"year\"\n:\n \n2016\n \n},\n \n    \n{\n \n\"title\"\n:\n \n\"Scarface\"\n,\n \n\"year\"\n:\n \n1983\n \n}\n\n  \n],\n\n  \n{\n \n\"ordered\"\n:\n \nfalse\n \n}\n\n\n);\n\n\n\n\n\n\ndb.collection.insert\n\u00b6\n\n\ndb\n.\nmovies\n.\ninsert\n({\n \n\"title\"\n:\n \n\"Deadpool\"\n,\n \n\"year\"\n:\n \n2016\n \n});",
            "title": "Create"
        },
        {
            "location": "/crud/create/#create",
            "text": "",
            "title": "Create"
        },
        {
            "location": "/crud/create/#dbcollectioninsertone",
            "text": "Insert a single document into a collection.  db . movies . insertOne ({   \"title\" :   \"Deadpool\" ,   \"year\" :   2016   });",
            "title": "db.collection.insertOne"
        },
        {
            "location": "/crud/create/#dbcollectioninsertmany",
            "text": "Insert multiple documents into a collection.  db . movies . insertMany ( \n   [ \n     {   \"_id\" :   1 ,   \"title\" :   \"Deadpool\" ,   \"year\" :   2016   },  \n     {   \"_id\" :   1 ,   \"title\" :   \"Scarface\" ,   \"year\" :   1983   },   // has the same id that Deadpool \n     {   \"_id\" :   2 ,   \"title\" :   \"Avatar\" ,   \"year\" :   2009   }, \n   ]  );   By default,  insertMany  insert all the documents with the parameter  ordered  set to true,\nthis means that mongo will insert all the documents one by one from top to bottom but\nif in the middle of the operation mongo finds an error with at least one document, the process will stop.  db . movies . insertMany ( \n   [ \n     {   \"_id\" :   1 ,   \"title\" :   \"Deadpool\" ,   \"year\" :   2016   },  \n     {   \"_id\" :   1 ,   \"title\" :   \"Scarface\" ,   \"year\" :   1983   },   // has the same id that Deadpool \n     {   \"_id\" :   2 ,   \"title\" :   \"Avatar\" ,   \"year\" :   2009   }, \n   ]  );   Using the parameter  ordered  with  false  as value, mongo will skip the error (if exist) and\nwill insert successfuly all the documents that have no errors.  db . movies . insertMany ( \n   [ \n     {   \"title\" :   \"Deadpool\" ,   \"year\" :   2016   },  \n     {   \"title\" :   \"Scarface\" ,   \"year\" :   1983   } \n   ], \n   {   \"ordered\" :   false   }  );",
            "title": "db.collection.insertMany"
        },
        {
            "location": "/crud/create/#dbcollectioninsert",
            "text": "db . movies . insert ({   \"title\" :   \"Deadpool\" ,   \"year\" :   2016   });",
            "title": "db.collection.insert"
        },
        {
            "location": "/crud/read/",
            "text": "Read\n\u00b6\n\n\nThis documentation have the objetive",
            "title": "Read"
        },
        {
            "location": "/crud/read/#read",
            "text": "This documentation have the objetive",
            "title": "Read"
        },
        {
            "location": "/crud/update/",
            "text": "Update\n\u00b6\n\n\nThis documentation have the objetive",
            "title": "Update"
        },
        {
            "location": "/crud/update/#update",
            "text": "This documentation have the objetive",
            "title": "Update"
        },
        {
            "location": "/crud/delete/",
            "text": "Delete\n\u00b6\n\n\nThis documentation have the objetive",
            "title": "Delete"
        },
        {
            "location": "/crud/delete/#delete",
            "text": "This documentation have the objetive",
            "title": "Delete"
        },
        {
            "location": "/crud/aggregation_framework/",
            "text": "Aggregation Framework",
            "title": "Aggregation Framework"
        },
        {
            "location": "/development/drivers/",
            "text": "MongoDB drivers\n\u00b6\n\n\nNode.js\n\u00b6\n\n\nPython\n\u00b6",
            "title": "Drivers"
        },
        {
            "location": "/development/drivers/#mongodb-drivers",
            "text": "",
            "title": "MongoDB drivers"
        },
        {
            "location": "/development/drivers/#nodejs",
            "text": "",
            "title": "Node.js"
        },
        {
            "location": "/development/drivers/#python",
            "text": "",
            "title": "Python"
        },
        {
            "location": "/development/schema_design/",
            "text": "",
            "title": "Schema design"
        },
        {
            "location": "/development/read_only_views/",
            "text": "db\n.\ncreateView\n(\n\n     \n\"peopleSectors\"\n,\n \n     \n\"people\"\n,\n \n     \n[\n\n         \n{\n \n            \n$lookup\n:\n \n{\n\n                \nfrom\n:\n \n\"companies\"\n,\n\n                \nlocalField\n:\n \n\"company_id\"\n,\n\n                \nforeignField\n:\n \n\"_id\"\n,\n\n                \nas\n:\n \n\"sector\"\n\n            \n}\n \n        \n},\n\n        \n{\n \n$unwind\n:\n \n\"$sector\"\n \n},\n\n        \n{\n \n            \n$project\n:\n \n{\n\n                \n\"_id\"\n:\n \n0\n,\n \n                \n\"company_id\"\n:\n \n1\n,\n\n                \n\"first_name\"\n:\n \n1\n,\n \n                \n\"last_name\"\n:\n \n1\n,\n \n                \n\"job\"\n:\n \n1\n,\n \n                \n\"sector\"\n:\n \n\"$sector.sector\"\n,\n\n                \n\"company\"\n:\n \n\"$sector.name\"\n,\n\n            \n}\n\n        \n},\n\n        \n{\n \n            \n$project\n:\n \n{\n\n                \n\"company_id\"\n:\n \n0\n,\n\n            \n}\n\n        \n}\n\n     \n]\n\n\n)\n\n\n\n\n\n\ndb\n.\ncreateView\n(\n\n     \n\"tweets_sql\"\n,\n \n     \n\"tweets\"\n,\n \n     \n[\n\n        \n{\n \n            \n$project\n:\n \n{\n\n                \n\"_id\"\n:\n \n1\n,\n \n                \n\"created_at\"\n:\n \n1\n,\n\n                \n\"id\"\n:\n \n1\n,\n \n                \n\"source\"\n:\n \n1\n,\n \n                \n\"text\"\n:\n \n1\n,\n \n                \n\"user_id\"\n:\n \n\"$user.id\"\n,\n\n                \n\"language\"\n:\n \n\"$user.lang\"\n,\n\n                \n\"location\"\n:\n \n\"$user.location\"\n,\n\n                \n\"name\"\n:\n \n\"$user.name\"\n,\n\n                \n\"screen_name\"\n:\n \n\"$user.screen_name\"\n\n            \n}\n\n        \n}\n       \n     \n]\n\n\n)",
            "title": "Read-only views"
        },
        {
            "location": "/management_actions/common_tasks/",
            "text": "Common tasks\n\u00b6\n\n\nShutdown a mongod instance safely\n\u00b6\n\n\nMongo Shell\n\u00b6\n\n\nuse\n \nadmin\n\n\ndb\n.\nshutdownServer\n();\n\n\n\n\n\n\nCommand line\n\u00b6\n\n\nmongod --dbpath ~/db/ --shutdown\n\n\n\n\n\nImport and export data\n\u00b6\n\n\nImport\n\u00b6\n\n\nmongoimport --port \n12345\n --db database --collection mycollection --file filename.json\n\n\n\n\n\nopenssl commands\n\u00b6",
            "title": "Common tasks"
        },
        {
            "location": "/management_actions/common_tasks/#common-tasks",
            "text": "",
            "title": "Common tasks"
        },
        {
            "location": "/management_actions/common_tasks/#shutdown-a-mongod-instance-safely",
            "text": "",
            "title": "Shutdown a mongod instance safely"
        },
        {
            "location": "/management_actions/common_tasks/#mongo-shell",
            "text": "use   admin  db . shutdownServer ();",
            "title": "Mongo Shell"
        },
        {
            "location": "/management_actions/common_tasks/#command-line",
            "text": "mongod --dbpath ~/db/ --shutdown",
            "title": "Command line"
        },
        {
            "location": "/management_actions/common_tasks/#import-and-export-data",
            "text": "",
            "title": "Import and export data"
        },
        {
            "location": "/management_actions/common_tasks/#import",
            "text": "mongoimport --port  12345  --db database --collection mycollection --file filename.json",
            "title": "Import"
        },
        {
            "location": "/management_actions/common_tasks/#openssl-commands",
            "text": "",
            "title": "openssl commands"
        },
        {
            "location": "/management_actions/configuration_files/",
            "text": "Configuration files\n\u00b6\n\n\nConfiguration files are very useful when your \nmongod\n or \nmongos\n call it's very long and has a lot of parameters. It will prevent you to make mistakes and typos, and you will able to reuse common parameters on your instances. Very necessary when you are dealing with a encrypted replica set.\n\n\nUse a configuration File\n\u00b6\n\n\nTo run a mongo instance using a config file, add the following parameter:\n\n\nmongod --config /home/tony/mongod.yml\n\nmongos --config /home/tony/mongos.yml\n\n\n\n\n\nOr:\n\n\nmongod -f /home/tony/mongod.yml\n\nmongos -f /home/tony/mongos.yml\n\n\n\n\n\nFile format\n\u00b6\n\n\nMongoDB configuration files are written in \nYAML\n. \n\n\n\n\nNote\n\n\nYAML doesn't support tab indentation, so use spaces instead.\n\n\n\n\nHere's a example file with a common instance of a mongod with replication, x509 authentication and encryption enabled:\n\n\nstorage\n:\n\n    \ndbPath\n:\n \n\"/home/tony/awesomeReplSet/r0\"\n\n\nsystemLog\n:\n\n   \ndestination\n:\n \nfile\n\n   \npath\n:\n \n\"/home/tony/awesomeReplSet/r0/mongo.log\"\n\n\nnet\n:\n\n   \nport\n:\n \n27111\n\n   \nssl\n:\n\n       \nmode\n:\n \nrequireSSL\n\n       \nPEMKeyFile\n:\n \n\"/home/tony/awesomeReplSet/member0.pem\"\n\n       \nCAFile\n:\n \n\"/home/tony/awesomeReplSet/ca.pem\"\n\n\nreplication\n:\n\n    \nreplSetName\n:\n \nawesomeReplSet\n\n\nsecurity\n:\n\n   \nauthorization\n:\n \nenabled\n\n   \nclusterAuthMode\n:\n \nx509\n\n   \nenableEncryption\n:\n \ntrue\n\n   \nencryptionKeyFile\n:\n \n\"/home/tony/awesomeReplSet/mongodb-keyfile\"\n\n\nprocessManagement\n:\n\n   \nfork\n:\n \ntrue\n\n\n\n\n\n\n\n\nTip\n\n\nYou can combine a config file and parameters passed by the command line to have maximum flexibility.\n\n\n\n\nSee a complete list of MongoDB configuration files \nhere\n.",
            "title": "Configuration files"
        },
        {
            "location": "/management_actions/configuration_files/#configuration-files",
            "text": "Configuration files are very useful when your  mongod  or  mongos  call it's very long and has a lot of parameters. It will prevent you to make mistakes and typos, and you will able to reuse common parameters on your instances. Very necessary when you are dealing with a encrypted replica set.",
            "title": "Configuration files"
        },
        {
            "location": "/management_actions/configuration_files/#use-a-configuration-file",
            "text": "To run a mongo instance using a config file, add the following parameter:  mongod --config /home/tony/mongod.yml\n\nmongos --config /home/tony/mongos.yml  Or:  mongod -f /home/tony/mongod.yml\n\nmongos -f /home/tony/mongos.yml",
            "title": "Use a configuration File"
        },
        {
            "location": "/management_actions/configuration_files/#file-format",
            "text": "MongoDB configuration files are written in  YAML .    Note  YAML doesn't support tab indentation, so use spaces instead.   Here's a example file with a common instance of a mongod with replication, x509 authentication and encryption enabled:  storage : \n     dbPath :   \"/home/tony/awesomeReplSet/r0\"  systemLog : \n    destination :   file \n    path :   \"/home/tony/awesomeReplSet/r0/mongo.log\"  net : \n    port :   27111 \n    ssl : \n        mode :   requireSSL \n        PEMKeyFile :   \"/home/tony/awesomeReplSet/member0.pem\" \n        CAFile :   \"/home/tony/awesomeReplSet/ca.pem\"  replication : \n     replSetName :   awesomeReplSet  security : \n    authorization :   enabled \n    clusterAuthMode :   x509 \n    enableEncryption :   true \n    encryptionKeyFile :   \"/home/tony/awesomeReplSet/mongodb-keyfile\"  processManagement : \n    fork :   true    Tip  You can combine a config file and parameters passed by the command line to have maximum flexibility.   See a complete list of MongoDB configuration files  here .",
            "title": "File format"
        },
        {
            "location": "/management_actions/replication/",
            "text": "Replication\n\u00b6\n\n\nA replica set consists in several instances of \nmongod\n running at different servers. Its purpose is to save a copy the database at each server (redundancy of data).\n\n\nIt is formed by a Primary server, a number of secondary servers and optionally, a number of arbiters. The primary is normally the one that receives the commands from Mongo drivers.\n\n\nCommon configurations\n\u00b6\n\n\nIt is recommended to have a odd number of replica set members.\n\n\n3 members in the replica set\n\u00b6\n\n\nThis is the most common configuration\n\n\n2 members in the replica set and an arbiter\n\u00b6\n\n\n5 members in the replica set\n\u00b6\n\n\nCreate a replica set\n\u00b6\n\n\nmongod --replSet myReplSet --dbpath ~/db/r1 --logpath ~/db/r1/mongodb.log --port \n30000\n --fork\n\n\n\n\n\nAdd a member to a running replica set\n\u00b6\n\n\nReconfig\n\u00b6\n\n\nArbiters\n\u00b6",
            "title": "Replication"
        },
        {
            "location": "/management_actions/replication/#replication",
            "text": "A replica set consists in several instances of  mongod  running at different servers. Its purpose is to save a copy the database at each server (redundancy of data).  It is formed by a Primary server, a number of secondary servers and optionally, a number of arbiters. The primary is normally the one that receives the commands from Mongo drivers.",
            "title": "Replication"
        },
        {
            "location": "/management_actions/replication/#common-configurations",
            "text": "It is recommended to have a odd number of replica set members.",
            "title": "Common configurations"
        },
        {
            "location": "/management_actions/replication/#3-members-in-the-replica-set",
            "text": "This is the most common configuration",
            "title": "3 members in the replica set"
        },
        {
            "location": "/management_actions/replication/#2-members-in-the-replica-set-and-an-arbiter",
            "text": "",
            "title": "2 members in the replica set and an arbiter"
        },
        {
            "location": "/management_actions/replication/#5-members-in-the-replica-set",
            "text": "",
            "title": "5 members in the replica set"
        },
        {
            "location": "/management_actions/replication/#create-a-replica-set",
            "text": "mongod --replSet myReplSet --dbpath ~/db/r1 --logpath ~/db/r1/mongodb.log --port  30000  --fork",
            "title": "Create a replica set"
        },
        {
            "location": "/management_actions/replication/#add-a-member-to-a-running-replica-set",
            "text": "",
            "title": "Add a member to a running replica set"
        },
        {
            "location": "/management_actions/replication/#reconfig",
            "text": "",
            "title": "Reconfig"
        },
        {
            "location": "/management_actions/replication/#arbiters",
            "text": "",
            "title": "Arbiters"
        },
        {
            "location": "/management_actions/sharding/",
            "text": "",
            "title": "Sharding"
        },
        {
            "location": "/management_actions/statistics/",
            "text": "",
            "title": "Statistics"
        },
        {
            "location": "/security/encryption/",
            "text": "",
            "title": "Encryption"
        },
        {
            "location": "/security/roles/",
            "text": "Roles\n\u00b6\n\n\nCommon built in roles\n\u00b6\n\n\nCreate users with a role\n\u00b6\n\n\ndb\n.\ncreateUser\n({\n\n    \nuser\n:\n \n'userAdmin'\n,\n \n    \npwd\n:\n \n'badges'\n,\n \n    \nroles\n:\n \n[\n\n        \n{\n \nrole\n:\n \n'userAdminAnyDatabase'\n,\n \ndb\n:\n \n'admin'\n \n}\n\n    \n]\n\n\n})\n\n\n\ndb\n.\ncreateUser\n({\n\n    \nuser\n:\n \n'dbAdmin'\n,\n \n    \npwd\n:\n \n'collections'\n,\n \n    \nroles\n:\n \n[\n\n        \n{\n \nrole\n:\n \n'dbAdminAnyDatabase'\n,\n \ndb\n:\n \n'admin'\n \n}\n\n    \n]\n\n\n})\n\n\n\ndb\n.\ncreateUser\n({\n\n    \nuser\n:\n \n'sysAdmin'\n,\n \n    \npwd\n:\n \n'cables'\n,\n \n    \nroles\n:\n \n[\n\n        \n{\n \nrole\n:\n \n'clusterManager'\n,\n \ndb\n:\n \n'admin'\n \n}\n\n    \n]\n\n\n})\n\n\n\ndb\n.\ncreateUser\n({\n\n    \nuser\n:\n \n'dataLoader'\n,\n \n    \npwd\n:\n \n'dumpin'\n,\n \n    \nroles\n:\n \n[\n\n        \n{\n \nrole\n:\n \n'readWriteAnyDatabase'\n,\n \ndb\n:\n \n'admin'\n \n}\n\n    \n]\n\n\n})\n\n\n\n\n\n\nCustom roles\n\u00b6\n\n\ndb\n.\ncreateRole\n({\n\n    \nrole\n:\n \n'HRDEPARTMENT'\n,\n \n    \nprivileges\n:\n \n[\n\n        \n{\n\n            \nresource\n:\n \n{\n\n                \ndb\n:\n \n'HR'\n,\n \n                \ncollection\n:\n \n''\n\n            \n},\n \n            \nactions\n:\n \n[\n\n                \n\"find\"\n,\n \n                \n\"dropUser\"\n\n            \n]\n\n        \n},\n\n        \n{\n\n            \nresource\n:\n \n{\n\n                \ndb\n:\n \n'HR'\n,\n \n                \ncollection\n:\n \n'employees'\n\n            \n},\n \n            \nactions\n:\n \n[\n\"insert\"\n]\n\n        \n}\n\n    \n],\n \n    \nroles\n:\n \n[]\n\n\n})",
            "title": "Roles"
        },
        {
            "location": "/security/roles/#roles",
            "text": "",
            "title": "Roles"
        },
        {
            "location": "/security/roles/#common-built-in-roles",
            "text": "",
            "title": "Common built in roles"
        },
        {
            "location": "/security/roles/#create-users-with-a-role",
            "text": "db . createUser ({ \n     user :   'userAdmin' ,  \n     pwd :   'badges' ,  \n     roles :   [ \n         {   role :   'userAdminAnyDatabase' ,   db :   'admin'   } \n     ]  })  db . createUser ({ \n     user :   'dbAdmin' ,  \n     pwd :   'collections' ,  \n     roles :   [ \n         {   role :   'dbAdminAnyDatabase' ,   db :   'admin'   } \n     ]  })  db . createUser ({ \n     user :   'sysAdmin' ,  \n     pwd :   'cables' ,  \n     roles :   [ \n         {   role :   'clusterManager' ,   db :   'admin'   } \n     ]  })  db . createUser ({ \n     user :   'dataLoader' ,  \n     pwd :   'dumpin' ,  \n     roles :   [ \n         {   role :   'readWriteAnyDatabase' ,   db :   'admin'   } \n     ]  })",
            "title": "Create users with a role"
        },
        {
            "location": "/security/roles/#custom-roles",
            "text": "db . createRole ({ \n     role :   'HRDEPARTMENT' ,  \n     privileges :   [ \n         { \n             resource :   { \n                 db :   'HR' ,  \n                 collection :   '' \n             },  \n             actions :   [ \n                 \"find\" ,  \n                 \"dropUser\" \n             ] \n         }, \n         { \n             resource :   { \n                 db :   'HR' ,  \n                 collection :   'employees' \n             },  \n             actions :   [ \"insert\" ] \n         } \n     ],  \n     roles :   []  })",
            "title": "Custom roles"
        },
        {
            "location": "/security/auditing/",
            "text": "",
            "title": "Auditing"
        },
        {
            "location": "/security/good_practices/",
            "text": "",
            "title": "Good practices"
        },
        {
            "location": "/performance/indexes/",
            "text": "Index definition\n\u00b6\n\n\nIndex creation\n\u00b6\n\n\nIndex dropping\n\u00b6\n\n\nConsideration while creating indexes\n\u00b6\n\n\nIndex prefix\n\u00b6\n\n\nCovered queries\n\u00b6",
            "title": "Indexes"
        },
        {
            "location": "/performance/indexes/#index-definition",
            "text": "",
            "title": "Index definition"
        },
        {
            "location": "/performance/indexes/#index-creation",
            "text": "",
            "title": "Index creation"
        },
        {
            "location": "/performance/indexes/#index-dropping",
            "text": "",
            "title": "Index dropping"
        },
        {
            "location": "/performance/indexes/#consideration-while-creating-indexes",
            "text": "",
            "title": "Consideration while creating indexes"
        },
        {
            "location": "/performance/indexes/#index-prefix",
            "text": "",
            "title": "Index prefix"
        },
        {
            "location": "/performance/indexes/#covered-queries",
            "text": "",
            "title": "Covered queries"
        },
        {
            "location": "/diagnostics_and_debugging/common_issues/",
            "text": "",
            "title": "Common issues"
        },
        {
            "location": "/diagnostics_and_debugging/tools/",
            "text": "Mongoclient\n\n\nmtools",
            "title": "Tools"
        },
        {
            "location": "/deployment/common_steps/",
            "text": "",
            "title": "Common steps"
        },
        {
            "location": "/deployment/good_practices/",
            "text": "",
            "title": "Good practices"
        }
    ]
}